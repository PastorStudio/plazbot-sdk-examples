export interface AgentOptions {
    workspaceId: string;
    apiKey: string;
    zone: "LA" | "EU";
    customUrl?: string;
}
export declare class Agent {
    private workspaceId;
    private apiKey?;
    private mcpUrl;
    private http;
    constructor(options: AgentOptions);
    addAgent(params: {
        name: string;
        prompt: string;
        buffer: number;
        zone: "LA" | "EU";
        color?: 'orange' | 'blue' | 'green' | 'gray' | 'white';
        question?: string;
        description?: string;
    }): Promise<{
        agentId: string;
        success: boolean;
        message: string;
    }>;
    updateAgent(params: {
        id: string;
        name?: string;
        description?: string;
        question?: string;
        color?: string;
        prompt?: string;
        zone?: "LA" | "EU";
        buffer?: number;
    }): Promise<{
        success: boolean;
        message: string;
    }>;
    addExample(params: {
        id: string;
        example: string;
        color?: 'orange' | 'blue' | 'green' | 'gray' | 'white';
    }): Promise<{
        success: boolean;
        message: string;
    }>;
    deleteAgent(params: {
        id: string;
    }): Promise<{
        success: boolean;
        message: string;
    }>;
    getAgentById(params: {
        id: string;
    }): Promise<any>;
    getAgents(): Promise<any[]>;
    clearExamples(agentId: string): Promise<any>;
    onMessage(params: {
        agentId: string;
        question: string;
        sessionId: string;
    }): Promise<any>;
}
