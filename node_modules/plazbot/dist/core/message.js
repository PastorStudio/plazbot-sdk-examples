"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Message = void 0;
const axios_1 = __importDefault(require("axios"));
class Message {
    constructor(options) {
        //private readonly DEFAULT_MCP_URL = "https://api.plazbot.io";
        this.DEFAULT_MCP_URL = "http://localhost:5090";
        this.workspaceId = options.workspaceId;
        this.apiKey = options.apiKey;
        const zone = options.zone ?? "LA";
        if (zone !== "EU" && zone !== "LA") {
            throw new Error("Invalid zone. Must be 'EU' or 'LA'.");
        }
        this.mcpUrl = zone === "EU"
            ? "https://apieu.plazbot.io"
            : "https://api.plazbot.io";
        this.http = axios_1.default.create({
            baseURL: this.mcpUrl,
            headers: {
                ...(this.apiKey && { 'Authorization': `Bearer ${this.apiKey}` }),
                'x-workspace-id': this.workspaceId
            }
        });
    }
    //Metodo que envia un mensaje a la IA y luego este lo envia al numero de Whatsapp.
    async onWhatsappMessage(params) {
        const body = {
            workspaceId: this.workspaceId,
            from: params.from,
            message: params.message,
            sessionId: params.sessionId
        };
        const response = await this.http.post('/api/whatsapp/message', body);
        if (response.status < 200 || response.status >= 300) {
            throw new Error(`Error enviando mensaje WhatsApp: ${response.statusText}`);
        }
    }
    async onConversation(params) {
        const body = {
            workspaceId: this.workspaceId,
            to: params.to,
            templateId: params.templateId,
            variables: params.variables
        };
        const response = await this.http.post('/api/whatsapp/conversation', body);
        if (response.status < 200 || response.status >= 300) {
            throw new Error(`Error enviando conversaci√≥n: ${response.statusText}`);
        }
    }
}
exports.Message = Message;
