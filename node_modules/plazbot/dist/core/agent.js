"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Agent = void 0;
const axios_1 = __importDefault(require("axios"));
class Agent {
    constructor(options) {
        this.DEFAULT_MCP_URL = "https://api.plazbot.com";
        this.workspaceId = options.workspaceId;
        this.apiKey = options.apiKey;
        const zone = options.zone ?? "LA";
        if (zone !== "EU" && zone !== "LA") {
            throw new Error("Invalid zone. Must be 'EU' or 'LA'.");
        }
        this.mcpUrl = zone === "EU"
            ? "https://apieu.plazbot.com"
            : "https://api.plazbot.com";
        this.http = axios_1.default.create({
            baseURL: this.mcpUrl,
            headers: {
                ...(this.apiKey && { 'Authorization': `Bearer ${this.apiKey}` }),
                'x-workspace-id': this.workspaceId
            }
        });
    }
    async addAgent(params) {
        const allowedColors = ['orange', 'blue', 'green', 'gray', 'white'];
        const color = allowedColors.includes(params.color ?? '') ? params.color : 'white';
        const body = {
            workspaceId: this.workspaceId,
            name: params.name,
            prompt: params.prompt,
            buffer: params.buffer,
            zone: params.zone,
            color: color,
            question: params.question,
            description: params.description
        };
        const response = await this.http.post('/api/agent/add', body);
        if (response.status < 200 || response.status >= 300) {
            throw new Error(`Error creating agent: ${response.statusText}`);
        }
        const agentId = response.data.agentId;
        return {
            agentId,
            success: true,
            message: `Agent created successfully. Agent ID: ${agentId}`
        };
    }
    async updateAgent(params) {
        if (params.zone) {
            throw new Error("Zone cannot be updated. To change zones, delete and recreate the agent in the desired region.");
        }
        if (params.color && !['orange', 'blue', 'green', 'gray', 'white'].includes(params.color)) {
            throw new Error("Invalid color. Allowed values are: orange, blue, green, gray, white.");
        }
        if (typeof params.buffer === 'number' && (params.buffer < 3 || params.buffer > 10)) {
            throw new Error("Buffer must be between 3 and 10.");
        }
        const body = {
            workspaceId: this.workspaceId,
            id: params.id
        };
        if (params.name)
            body.name = params.name;
        if (params.description)
            body.description = params.description;
        if (params.question)
            body.question = params.question;
        if (params.color)
            body.color = params.color;
        if (params.prompt)
            body.prompt = params.prompt;
        if (params.zone)
            body.zone = params.zone;
        if (typeof params.buffer === 'number')
            body.buffer = params.buffer;
        const response = await this.http.post('/api/agent/update', body);
        if (response.status < 200 || response.status >= 300) {
            throw new Error(`Error updating agent: ${response.statusText}`);
        }
    }
    async addExample(params) {
        const allowedColors = ['orange', 'blue', 'green', 'gray', 'white'];
        const color = params.color && allowedColors.includes(params.color) ? params.color : 'white';
        const body = {
            id: params.id,
            workspaceId: this.workspaceId,
            example: params.example,
            color: color
        };
        const response = await this.http.post('/api/agent/add-example-agent', body);
        if (response.status < 200 || response.status >= 300) {
            throw new Error(`Error adding example: ${response.statusText}`);
        }
    }
    async deleteAgent(params) {
        const response = await this.http.delete('/api/agent/delete', {
            params: {
                id: params.id,
                workspaceId: this.workspaceId
            }
        });
        if (response.status < 200 || response.status >= 300) {
            throw new Error(`Error deleting agent: ${response.statusText}`);
        }
    }
    async getAgentById(params) {
        const response = await this.http.get('/api/agent/get-agent', {
            params: {
                id: params.id,
                workspaceId: this.workspaceId
            }
        });
        if (response.status < 200 || response.status >= 300) {
            throw new Error(`Error retrieving agent: ${response.statusText}`);
        }
        const data = response.data;
        return response.data;
    }
    async getAgents() {
        const response = await this.http.get('/api/agent/get-agents', {
            params: {
                workspaceId: this.workspaceId
            }
        });
        if (response.status < 200 || response.status >= 300) {
            throw new Error(`Error retrieving agents: ${response.statusText}`);
        }
        const data = response.data;
        return response.data.agent;
    }
    // Dentro de class Agent
    async clearExamples(agentId) {
        const response = await this.http.post('/api/agent/clear-examples', null, {
            params: {
                id: agentId,
                workspaceId: this.workspaceId
            },
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'x-workspace-id': this.workspaceId
            }
        });
        return response.data;
    }
    // Env√≠a un mensaje al agente
    async onMessage(params) {
        const body = {
            agentId: params.agentId,
            workspaceId: this.workspaceId,
            question: params.question
        };
        const response = await this.http.post('/api/agent/on-message', body);
        if (response.status < 200 || response.status >= 300) {
            throw new Error(`Error al procesar el mensaje: ${response.statusText}`);
        }
        return response.data;
    }
}
exports.Agent = Agent;
